#include "../include/sensor_processor.h"
#include <iostream>
#include <chrono>

namespace WaterIoT::Threading {

SensorProcessor::SensorProcessor(
    std::shared_ptr<Storage::IDataStorage> storage,
    std::shared_ptr<DataProcessor::WaterDataProcessor> processor,
    size_t numThreads
) : storage_(storage), processor_(processor), running_(false),
    total_processed_(0), total_errors_(0), total_processing_time_(0.0) {
    
    thread_pool_ = std::make_unique<ThreadPool>(numThreads);
    data_queue_ = std::make_unique<ProducerConsumer<Sensors::SensorData>>(1000);
    
    std::cout << "üè≠ ‰º†ÊÑüÂô®Â§ÑÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê" << std::endl;
}

SensorProcessor::~SensorProcessor() {
    stop();
    std::cout << "üè≠ ‰º†ÊÑüÂô®Â§ÑÁêÜÂô®Â∑≤ÈîÄÊØÅ" << std::endl;
}

void SensorProcessor::start() {
    if (running_) return;
    
    running_ = true;
    
    // ÂêØÂä®Êï∞ÊçÆÂ§ÑÁêÜÂ∑•‰ΩúÁ∫øÁ®ã
    worker_threads_.emplace_back([this] { dataProcessingWorker(); });
    worker_threads_.emplace_back([this] { storageWorker(); });
    
    std::cout << "üöÄ ‰º†ÊÑüÂô®Â§ÑÁêÜÁ≥ªÁªüÂêØÂä®" << std::endl;
}

void SensorProcessor::stop() {
    if (!running_) return;
    
    running_ = false;
    data_queue_->stop();
    
    for (auto& thread : worker_threads_) {
        if (thread.joinable()) {
            thread.join();
        }
    }
    worker_threads_.clear();
    
    std::cout << "üõë ‰º†ÊÑüÂô®Â§ÑÁêÜÁ≥ªÁªüÂÅúÊ≠¢" << std::endl;
}

bool SensorProcessor::addSensorData(const Sensors::SensorData& data) {
    if (!running_) return false;
    
    return data_queue_->produce(data);
}

void SensorProcessor::dataProcessingWorker() {
    std::cout << "üìä Êï∞ÊçÆÂ§ÑÁêÜÂ∑•‰ΩúÁ∫øÁ®ãÂêØÂä®" << std::endl;
    
    while (running_ || !data_queue_->empty()) {
        Sensors::SensorData data;
        
        if (data_queue_->consume(data, std::chrono::milliseconds(100))) {
            auto start = std::chrono::high_resolution_clock::now();
            
            try {
                processSingleData(data);
                
                auto end = std::chrono::high_resolution_clock::now();
                auto duration = std::chrono::duration<double, std::milli>(end - start);
                
                total_processed_++;
                total_processing_time_ += duration.count();
                
            } catch (const std::exception& e) {
                std::cout << "‚ùå Êï∞ÊçÆÂ§ÑÁêÜÈîôËØØ: " << e.what() << std::endl;
                total_errors_++;
            }
        }
    }
    
    std::cout << "üìä Êï∞ÊçÆÂ§ÑÁêÜÂ∑•‰ΩúÁ∫øÁ®ãÁªìÊùü" << std::endl;
}

void SensorProcessor::storageWorker() {
    std::cout << "üíæ Â≠òÂÇ®Â∑•‰ΩúÁ∫øÁ®ãÂêØÂä®" << std::endl;
    
    // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞ÊâπÈáèÂ≠òÂÇ®‰ºòÂåñ
    // ‰æãÂ¶ÇÔºöÊî∂ÈõÜ‰∏ÄÂÆöÊï∞ÈáèÁöÑÊï∞ÊçÆÂêéÊâπÈáèÂÜôÂÖ•Redis
    
    while (running_) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        // Â≠òÂÇ®Áõ∏ÂÖ≥ÁöÑÂêéÂè∞‰ªªÂä°
    }
    
    std::cout << "üíæ Â≠òÂÇ®Â∑•‰ΩúÁ∫øÁ®ãÁªìÊùü" << std::endl;
}

void SensorProcessor::processSingleData(const Sensors::SensorData& data) {
    // 1. Êï∞ÊçÆÈ™åËØÅÂíåÊ∏ÖÊ¥ó
    if (std::isnan(data.value) || std::isinf(data.value)) {
        throw std::runtime_error("Êó†ÊïàÊï∞ÊçÆÂÄº: " + std::to_string(data.value));
    }
    
    // 2. Â≠òÂÇ®Âà∞Redis
    if (storage_) {
        auto result = storage_->storeSensorData(data);
        if (!result.success) {
            throw std::runtime_error("Â≠òÂÇ®Â§±Ë¥•: " + result.message);
        }
        
        // 3. Êõ¥Êñ∞ÁºìÂ≠ò
        std::string cacheKey = "latest:" + data.sensorId;
        storage_->setCache(cacheKey, std::to_string(data.value), 300);
    }
    
    // 4. Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂëäË≠¶
    // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂëäË≠¶ÈÄªËæë
    if (data.value > 90.0) {  // ÂÅáËÆæ90‰ª•‰∏ä‰∏∫È´òÊ∞¥‰Ωç
        std::cout << "‚ö†Ô∏è È´òÊ∞¥‰ΩçÂëäË≠¶: " << data.sensorId 
                  << " = " << data.value << std::endl;
    }
}

SensorProcessor::Statistics SensorProcessor::getStatistics() const {
    std::lock_guard<std::mutex> lock(stats_mutex_);
    
    Statistics stats;
    stats.totalProcessed = total_processed_;
    stats.totalErrors = total_errors_;
    stats.queueSize = data_queue_->size();
    
    if (total_processed_ > 0) {
        stats.averageProcessingTime = total_processing_time_ / total_processed_;
    }
    
    return stats;
}

void SensorProcessor::printStatistics() const {
    auto stats = getStatistics();
    
    std::cout << "\nüìà Â§ÑÁêÜÁ≥ªÁªüÁªüËÆ°:" << std::endl;
    std::cout << "  Â∑≤Â§ÑÁêÜÊï∞ÊçÆ: " << stats.totalProcessed << " Êù°" << std::endl;
    std::cout << "  Â§ÑÁêÜÈîôËØØ: " << stats.totalErrors << " Êù°" << std::endl;
    std::cout << "  ÈòüÂàóÂ§ßÂ∞è: " << stats.queueSize << " Êù°" << std::endl;
    std::cout << "  Âπ≥ÂùáÂ§ÑÁêÜÊó∂Èó¥: " << std::fixed << std::setprecision(2) 
              << stats.averageProcessingTime << " ms" << std::endl;
}

// SensorSimulator implementation
SensorSimulator::SensorSimulator(SensorProcessor& processor)
    : processor_(processor), running_(false), total_generated_(0) {
    std::cout << "üé≠ ‰º†ÊÑüÂô®Ê®°ÊãüÂô®ÂàùÂßãÂåñ" << std::endl;
}

SensorSimulator::~SensorSimulator() {
    stop();
    std::cout << "üé≠ ‰º†ÊÑüÂô®Ê®°ÊãüÂô®Â∑≤ÈîÄÊØÅ" << std::endl;
}

void SensorSimulator::addSensor(std::shared_ptr<Sensors::ISensor> sensor,
                               std::chrono::milliseconds interval) {
    sensors_.push_back({sensor, interval});
    std::cout << "üì° Ê∑ªÂä†‰º†ÊÑüÂô®: " << sensor->getSensorId() 
              << " (Èó¥Èöî: " << interval.count() << "ms)" << std::endl;
}

void SensorSimulator::start() {
    if (running_) return;
    
    running_ = true;
    
    for (const auto& sensorInfo : sensors_) {
        sensor_threads_.emplace_back([this, sensorInfo] {
            sensorWorker(sensorInfo);
        });
    }
    
    std::cout << "üé≠ ‰º†ÊÑüÂô®Ê®°ÊãüÂô®ÂêØÂä®ÔºåÊ¥ªË∑É‰º†ÊÑüÂô®: " << sensors_.size() << std::endl;
}

void SensorSimulator::stop() {
    if (!running_) return;
    
    running_ = false;
    
    for (auto& thread : sensor_threads_) {
        if (thread.joinable()) {
            thread.join();
        }
    }
    sensor_threads_.clear();
    
    std::cout << "üé≠ ‰º†ÊÑüÂô®Ê®°ÊãüÂô®ÂÅúÊ≠¢" << std::endl;
}

void SensorSimulator::sensorWorker(SensorInfo sensorInfo) {
    std::cout << "üì° ‰º†ÊÑüÂô®Á∫øÁ®ãÂêØÂä®: " << sensorInfo.sensor->getSensorId() << std::endl;
    
    while (running_) {
        try {
            auto data = sensorInfo.sensor->readData();
            
            if (processor_.addSensorData(data)) {
                total_generated_++;
            } else {
                std::cout << "‚ö†Ô∏è Êï∞ÊçÆÈòüÂàóÂ∑≤Êª°Ôºå‰∏¢ÂºÉÊï∞ÊçÆ: " 
                          << sensorInfo.sensor->getSensorId() << std::endl;
            }
            
        } catch (const std::exception& e) {
            std::cout << "‚ùå ‰º†ÊÑüÂô®ËØªÂèñÈîôËØØ [" << sensorInfo.sensor->getSensorId() 
                      << "]: " << e.what() << std::endl;
        }
        
        std::this_thread::sleep_for(sensorInfo.interval);
    }
    
    std::cout << "üì° ‰º†ÊÑüÂô®Á∫øÁ®ãÁªìÊùü: " << sensorInfo.sensor->getSensorId() << std::endl;
}

} // namespace WaterIoT::Threading
